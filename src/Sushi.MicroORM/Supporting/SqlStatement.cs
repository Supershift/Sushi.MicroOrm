using System;
using System.Collections.Generic;
using System.Text;

namespace Sushi.MicroORM.Supporting
{
    /// <summary>
    /// Represents a SQL statement to be executed against a database.
    /// </summary>    
    public class SqlStatement
    {        
        /// <summary>
        /// Creates a new instance of <see cref="SqlStatement"/>.
        /// </summary>
        /// <param name="dmlStatement"></param>
        /// <param name="resultCardinality"></param>
        public SqlStatement(DMLStatementType dmlStatement, SqlStatementResultCardinality resultCardinality)
        {
            DMLStatement = dmlStatement;
            ResultCardinality = resultCardinality;
        }

        /// <summary>
        /// Gets the type of the DML statement.
        /// </summary>
        public DMLStatementType DMLStatement { get; protected set; }

        /// <summary>
        /// Gets the cardinality of the result expected to be generated by the statement.
        /// </summary>
        public SqlStatementResultCardinality ResultCardinality { get; protected set; }

        /// <summary>
        /// Gets or sets the DML clause of the statement, ie. SELECT MyColumn, UPDATE MyTable, etc.
        /// </summary>
        public string? DmlClause { get; set; }

        /// <summary>
        /// Gets or sets the INTO clause of an INSERT statement, ie. INTO MyTable(MyColumn1, MyColumn2).
        /// </summary>
        public string? InsertIntoClause { get; set; }
        /// <summary>
        /// Gets or sets the VALUES clause of an INSERT statement, ie. VALUES (@myValue1, @myValue2).
        /// </summary>
        public string? InsertValuesClause { get; set; }
        /// <summary>
        /// Get or sets the SET clause of an UPDATE statement, ie. SET MyColumn1 = @myValue1, MyColumn2 = @myValue2.
        /// </summary>
        public string? UpdateSetClause { get; set; }
        /// <summary>
        /// Gets or sets the output clause of the statement, ie. OUTPUT Inserted.MyColumn.
        /// </summary>
        public string? OutputClause { get; set; }

        /// <summary>
        /// Gets or sets the where clause of the statment, ie. WHERE MyColumn = @myParameter.
        /// </summary>
        public string? WhereClause { get; set; }

        /// <summary>
        /// Gets or sets the from clause of the statement, ie. FROM MyTable.
        /// </summary>
        public string? FromClause { get; set; }

        /// <summary>
        /// Gets or sets the order by clause of the statement, ie. ORDER BY MyColumn1 ASC, MyColumn2 DESC.
        /// </summary>
        public string? OrderByClause { get; set; }

        /// <summary>
        /// Gets or sets a custom sql statement to be executed. Can be anything, ie. EXEC myStoredProcedure @myParam, SELECT * FROM MyTable, etc.
        /// </summary>
        public string? CustomSqlStatement { get; set; }

        /// <summary>
        /// Gets a collection of <see cref="SqlStatementParameter"/> objects describing the parameters used in the statement.
        /// </summary>
        public List<SqlStatementParameter> Parameters { get; } = new List<SqlStatementParameter>();

        /// <summary>
        /// Gets or sets a value indicating if a second statement must be added which will retrieve the total number of rows for the resultset defined by <see cref="FromClause"/> and <see cref="WhereClause"/>.
        /// </summary>
        public bool AddPagingRowCountStatement { get; set; }

        /// <summary>
        /// Generates a sql statement based on the clauses.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            if (!string.IsNullOrWhiteSpace(CustomSqlStatement))
                return CustomSqlStatement;
            else
            {
                string result;
                switch (DMLStatement)
                {
                    case DMLStatementType.Insert:
                        result = $"{DmlClause}{Environment.NewLine}{InsertIntoClause}{Environment.NewLine}{OutputClause}{Environment.NewLine}{InsertValuesClause}";
                        break;
                    case DMLStatementType.Update:
                        result = $"{DmlClause}{Environment.NewLine}{UpdateSetClause}{Environment.NewLine}{OutputClause}{Environment.NewLine}{FromClause}{Environment.NewLine}{WhereClause}";
                        break;
                    default:
                        result = $"{DmlClause}{Environment.NewLine}{FromClause}{Environment.NewLine}{WhereClause}{Environment.NewLine}{OrderByClause}";
                        if (AddPagingRowCountStatement)
                            result += $"{Environment.NewLine}" + GeneratePagingRowCountSqlStatement();
                        break;
                }

                // remove double line endings
                result = result.Replace($"{Environment.NewLine}{Environment.NewLine}", Environment.NewLine);
                result = result.TrimEnd();

                return result;
            }
        }

        /// <summary>
        /// Generates a sql statement which counts the total number of rows for the resultset defined by <see cref="FromClause"/> and <see cref="WhereClause"/>.
        /// </summary>
        /// <returns></returns>
        private string GeneratePagingRowCountSqlStatement()
        {
            string result = $"SELECT COUNT(*){Environment.NewLine}{FromClause}{Environment.NewLine}{WhereClause}";
            return result;
        }
    }
}
