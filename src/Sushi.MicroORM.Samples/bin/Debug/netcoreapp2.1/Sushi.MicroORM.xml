<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sushi.MicroORM</name>
    </assembly>
    <members>
        <member name="T:Sushi.MicroORM.ComparisonOperator">
            <summary>
            Operators that test whether two expressions are the same. The operators are used to construct predicates for a WHERE search condition.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.Equals">
            <summary>
            Compares the equality of two expressions, i.e. WHERE {column} = {value}, WHERE {column} IS NULL. 
            </summary>        
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.NotEqualTo">
            <summary>
            Compares the equality of two expressions, resulting to TRUE if the left operand is not equal to the right operand, i.e. WHERE {column} != {value}, WHERE {column} IS NOT NULL. 
            </summary>        
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.Like">
            <summary>
            Determines whether a specific character string matches a specified pattern, i.e. WHERE {column} LIKE {pattern}. 
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.In">
            <summary>
            Determines whether a specified value matches any value in a subquery or a list, i.e. WHERE {column} IN ({value1},{value2},{value3}).
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.GreaterThan">
            <summary>
            Compares two expressions for greater than, i.e. WHERE {column} &gt; {value}
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.GreaterThanOrEquals">
            <summary>
            Compares two expressions for greater than or equal, i.e. WHERE {column} &gt;= {value}
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.LessThan">
            <summary>
            Compares two expressions for less than, i.e. WHERE {column} &lt; {value}
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.ComparisonOperator.LessThanOrEquals">
            <summary>
            Compares two expressions for less than or eqaul to, i.e. WHERE {column} &lt;= {value}
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.ConnectionStringProvider">
            <summary>
            Provides and manages database connectionstrings
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.ConnectionStringProvider.GetConnectionString(System.Type)">
            <summary>
            Gets the database connection string for the specific type, based on mapped connection strings. If no connection strings were mapped or no mapped result was found the default connection string is returned.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Connector`1">
            <summary>
            Retrieves database records and returns them as objects, based on provided mapping.
            </summary>
            <typeparam name="T">Type to convert database recrods to</typeparam>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sushi.MicroORM.Connector`1"/> class.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sushi.MicroORM.Connector`1"/> class, using <paramref name="connectionString"/> instead of the default connection string for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.#ctor(Sushi.MicroORM.Mapping.DataMap{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sushi.MicroORM.Connector`1"/> class, using <paramref name="map"/> instead of the default map for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.#ctor(System.String,Sushi.MicroORM.Mapping.DataMap{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Sushi.MicroORM.Connector`1"/> class, using <paramref name="connectionString"/> and <paramref name="map"/> instead of the default connection string and map for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Connector`1.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Connector`1.ConnectionString">
            <summary>
            Gets the connection string used to connect to the database
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Connector`1.Map">
            <summary>
            Gets an object representing the mapping between <typeparamref name="T"/> and database.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Connector`1.FetchSingleMode">
            <summary>
            Gets or sets the behavior for connector's FetchSingle methods in case a record is not found in the database.         
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.CreateDataFilter">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.DataFilter`1"/>. Use the constructor of DataFilter for more control when creating a DataFilter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSqlStatement``1(Sushi.MicroORM.Supporting.SqlStatement{`0,``0})">
            <summary>
            Executes the <paramref name="statement"/> and returns the result generated by the execution.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSqlStatementAsync``1(Sushi.MicroORM.Supporting.SqlStatement{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Executes the <paramref name="statement"/> and returns the result generated by the execution.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Save(`0)">
            <summary>
            Inserts or updates <paramref name="entity"/> in the database, based on primary key for <typeparamref name="T"/>. If the primary key is 0 or less, an insert is performed. Otherwise an update is performed.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.SaveAsync(`0)">
            <summary>
            Inserts or updates <paramref name="entity"/> in the database, based on primary key for <typeparamref name="T"/>. If the primary key is 0 or less, an insert is performed. Otherwise an update is performed.
            </summary>
            <param name="entity"></param>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.SaveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Inserts or updates <paramref name="entity"/> in the database, based on primary key for <typeparamref name="T"/>. If the primary key is 0 or less, an insert is performed. Otherwise an update is performed.
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.CreateFetchSingleFilter(System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Sushi.MicroORM.DataFilter`1" /> that can be used with <see cref="M:Sushi.MicroORM.Connector`1.FetchSingle(System.Int32)"/> and <see cref="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(System.Int32)"/>. 
            Throws an exception if mapping for <see cref="P:Sushi.MicroORM.Connector`1.Map"/> does not have one and only one primary key column which is mapped to <see cref="T:System.Int32"/>.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingle(System.Int32)">
            <summary>
            Fetches a single record from the database, using <paramref name="id"/> to build a where clause on <typeparamref name="T"/>'s primary key.
            Only works if the mapping for <typeparamref name="T"/> has one and only one primary key column and it is mapped to <see cref="T:System.Int32"/>.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingle(System.String)">
            <summary>
            Fetches a single record from the database, using the query provided by <paramref name="sqlText"/>. 
            </summary>        
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingle(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches a single record from the database, using <paramref name="filter"/> to build a where clause for <typeparamref name="T"/>.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingle(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches a single record from the database, using the query provided by <paramref name="sqlText"/>. Parameters used in <paramref name="sqlText"/> can be set on <paramref name="filter"/>.
            </summary>
            <param name="filter"></param>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(System.Int32)">
            <summary>
            Fetches a single record from the database, using <paramref name="id"/> to build a where clause on <typeparamref name="T"/>'s primary key.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches a single record from the database, using <paramref name="filter"/> to build a where clause for <typeparamref name="T"/>.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(System.String)">
            <summary>
            Fetches a single record from the database, using the query provided by <paramref name="sqlText"/>. 
            </summary>        
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches a single record from the database, using the query provided by <paramref name="sqlText"/>. Parameters used in <paramref name="sqlText"/> can be set on <paramref name="filter"/>.
            </summary>
            <param name="filter"></param>
            <param name="sqlText"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchSingleAsync(System.String,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Fetches a single record from the database, using the query provided by <paramref name="sqlText"/>. Parameters used in <paramref name="sqlText"/> can be set on <paramref name="filter"/>.
            </summary>
            <param name="filter"></param>
            <param name="sqlText"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Update(`0)">
            <summary>
            Updates the record <paramref name="entity"/> in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Update(`0,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Updates records in the database for <paramref name="filter"/> using the values on <paramref name="entity"/>.
            </summary>
            <param name="entity"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.UpdateAsync(`0)">
            <summary>
            Updates the record <paramref name="entity"/> in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the record <paramref name="entity"/> in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.UpdateAsync(`0,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Updates records in the database for <paramref name="filter"/> using the values on <paramref name="entity"/>.
            </summary>
            <param name="entity"></param>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Insert(`0)">
            <summary>
            Inserts <typeparamref name="T"/> in the database.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Insert(`0,System.Boolean)">
            <summary>
            Inserts <typeparamref name="T"/> in the database.
            </summary>
            <param name="entity"></param>
            <param name="isIdentityInsert">When false, the primary key is set by the database. If true, an identity insert is performed</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertOrUpdate(`0)">
            <summary>
            Inserts a new record for <typeparamref name="T"/> in the database if no record exists for the same primary key. Else the existing record is updated.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertOrUpdate(`0,System.Boolean)">
            <summary>
            Inserts a new record for <typeparamref name="T"/> in the database if no record exists for the same primary key. Else the existing record is updated.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertOrUpdateAsync(`0)">
            <summary>
            Inserts a new record for <typeparamref name="T"/> in the database if no record exists for the same primary key. Else the existing record is updated.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertOrUpdateAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts a new record for <typeparamref name="T"/> in the database if no record exists for the same primary key. Else the existing record is updated.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertAsync(`0)">
            <summary>
            Inserts <typeparamref name="T"/> in the database.
            </summary>
            <param name="entity"></param>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertAsync(`0,System.Boolean)">
            <summary>
            Inserts <typeparamref name="T"/> in the database.
            </summary>
            <param name="entity"></param>
            <param name="isIdentityInsert">When false, the primary key is set by the database. If true, an identity insert is performed.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.InsertAsync(`0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Inserts <typeparamref name="T"/> in the database.
            </summary>
            <param name="entity"></param>
            <param name="isIdentityInsert">When false, the primary key is set by the database. If true, an identity insert is performed.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAll(System.String)">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>.
            </summary>
            <param name="sqlText"></param>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAll(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches all records from the database, using <paramref name="filter"/> to build a where clause
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAll(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>, using parameters set on <paramref name="filter"/>
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(System.String)">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches all records from the database, using <paramref name="filter"/> to build a where clause
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Fetches all records from the database, using <paramref name="filter"/> to build a where clause
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>, using parameters set on <paramref name="filter"/>
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.FetchAllAsync(System.String,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Fetches all records from the database for <paramref name="sqlText"/>, using parameters set on <paramref name="filter"/>
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Delete(`0)">
            <summary>
            Deletes <paramref name="entity"/> from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.Delete(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Deletes records from the database using a where clause defined by <paramref name="filter"/>
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.DeleteAsync(`0)">
            <summary>
            Deletes <paramref name="entity"/> from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes <paramref name="entity"/> from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.DeleteAsync(Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Deletes records from the database using a where clause defined by <paramref name="filter"/>
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.DeleteAsync(Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Deletes records from the database using a where clause defined by <paramref name="filter"/>
            </summary>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteNonQuery(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> without a return value.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteNonQueryAsync(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> without a return value.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteNonQuery(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> without a return value. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteNonQueryAsync(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> without a return value. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteNonQueryAsync(System.String,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> without a return value. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteScalar``1(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> with a return value of <typeparamref name="TScalar"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteScalar``1(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> with a return value of <typeparamref name="TScalar"/>. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>        
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteScalarAsync``1(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> with a return value of <typeparamref name="TScalar"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteScalarAsync``1(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> with a return value of <typeparamref name="TScalar"/>. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>        
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteScalarAsync``1(System.String,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/> with a return value of <typeparamref name="TScalar"/>. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>        
            <param name="filter"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSet``1(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/>. The first column of each row is added to the result. 
            </summary>
            <param name="sqlText"></param>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSet``1(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/>. The first column of each row is added to the result. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>     
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSetAsync``1(System.String)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/>. The first column of each row is added to the result.
            </summary>
            <param name="sqlText"></param>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSetAsync``1(System.String,Sushi.MicroORM.DataFilter{`0})">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/>. The first column of each row is added to the result. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.ExecuteSetAsync``1(System.String,Sushi.MicroORM.DataFilter{`0},System.Threading.CancellationToken)">
            <summary>
            Executes a custom SQL statement defined by <paramref name="sqlText"/>. The first column of each row is added to the result. Parameters can be defined on <paramref name="filter"/>.
            </summary>
            <param name="sqlText"></param>
            <param name="filter"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.BulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of entities of <typeparamref name="T"/> using Sql Bulk Copy. The SqlDbType defined on the column attributes is ignored. Instead, the Sql Type is derived from the .NET type of the mapped properties.
            A list of supported types can be found here: https://msdn.microsoft.com/en-us/library/system.data.datacolumn.datatype(v=vs.110).aspx
            This method supports System.Transaction.TransactionScope.
            Please mind that SqlBulkCopy is case sensitive with regards to column names.
            </summary>        
            <param name="entities"></param>
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.BulkInsert(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Inserts a collection of entities of <typeparamref name="T"/> using Sql Bulk Copy. The SqlDbType defined on the column attributes is ignored. Instead, the Sql Type is derived from the .NET type of the mapped properties.
            A list of supported types can be found here: https://msdn.microsoft.com/en-us/library/system.data.datacolumn.datatype(v=vs.110).aspx
            This method supports System.Transaction.TransactionScope.
            Please mind that SqlBulkCopy is case sensitive with regards to column names.
            </summary>        
            <param name="entities"></param>
            <param name="identityInsert"></param>        
        </member>
        <member name="M:Sushi.MicroORM.Connector`1.BulkInsert(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Inserts a collection of entities of <typeparamref name="T"/> using Sql Bulk Copy. The SqlDbType defined on the column attributes is ignored. Instead, the Sql Type is derived from the .NET type of the mapped properties.
            A list of supported types can be found here: https://msdn.microsoft.com/en-us/library/system.data.datacolumn.datatype(v=vs.110).aspx
            This method supports System.Transaction.TransactionScope.
            Please mind that SqlBulkCopy is case sensitive with regards to column names.
            </summary>        
            <param name="entities"></param>
            <param name="isIdentityInsert">When false, the primary key is set by the database. If true, an identity insert is performed. The default value is false.</param>
            <param name="sqlBulkCopyOptions"></param>
        </member>
        <member name="T:Sushi.MicroORM.FetchSingleMode">
            <summary>
            Specifies the options available for fetching single records
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.FetchSingleMode.ReturnDefaultWhenNotFound">
            <summary>
            Returns the Default for a class when no record found (which is in most cases NULL)
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.FetchSingleMode.ReturnNewObjectWhenNotFound">
            <summary>
            Returns a new instance for a class when no record found
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.DatabaseConfiguration">
            <summary>
            Provides methods and properties to configure the Sushi MicroORM
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.DatabaseConfiguration.SetDefaultConnectionString(System.String)">
            <summary>
            Sets the default database connection string to use when connecting to a database. 
            </summary>
            <param name="defaultConnectionString"></param>
        </member>
        <member name="M:Sushi.MicroORM.DatabaseConfiguration.AddMappedConnectionString(System.Type,System.String)">
            <summary>
            Add an alternative database connection string which is resolved on the fully qualified typename of the dataobject. 
            </summary>
            <param name="type"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:Sushi.MicroORM.DatabaseConfiguration.AddMappedConnectionString(System.String,System.String)">
            <summary>
            Add an alternative database connection string which is resolved on (part of) of the fully qualified typename of the dataobject. The most specific match is used as connection string. Matching is case sensitive.
            </summary>
            <param name="typeName">Fully qualified name of the type to match. Part of the name can also be provided.</param>
            <param name="connectionString"></param>
        </member>
        <member name="P:Sushi.MicroORM.DatabaseConfiguration.IsConnectionStringCachingEnabled">
            <summary>
            Gets or sets a value indicating if connetionstrings are cached for types. This is only used if multiple connection strings are provided through the AddMappedConnectionString method. Default value is true.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DatabaseConfiguration.FetchSingleMode">
            <summary>
            Gets or sets the behavior for connector's FetchSingle methods in case a record is not found in the database. 
            Default behavior is ReturnDefaultWhenNotFound.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DatabaseConfiguration.DataMapProvider">
            <summary>
            Gets the provider for the data map.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DatabaseConfiguration.Log">
            <summary>
            Gets or sets an action that is called on every command sent to a database. It is advised to only use this in debug.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.DataFilter`1">
            <summary>
            Provides methods to build a SQL statement for use with <see cref="T:Sushi.MicroORM.Connector`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Sushi.MicroORM.DataFilter`1"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.#ctor(Sushi.MicroORM.Mapping.DataMap)">
            <summary>
            Creates an instance of <see cref="T:Sushi.MicroORM.DataFilter`1"/> using the specified mapping.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DataFilter`1.Map">
            <summary>
            Gets an object representing the mapping between class T and database
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DataFilter`1.MaxResults">
            <summary>
            Gets or sets the maximum number of returned rows.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DataFilter`1.OrderBy">
            <summary>
            Gets the ORDER BY clause that will be applied to the SQL statement to sort the result set. The column list can be appened using <see cref="M:Sushi.MicroORM.DataFilter`1.AddOrder(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Sushi.MicroORM.SortOrder)"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.DataFilter`1.Paging">
            <summary>
            Gets or sets a <see cref="T:Sushi.MicroORM.PagingData"/> object that will be used to add paging to the SQL statement.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddParameter``1(System.String,``0)">
            <summary>
            Adds a parameter and its value to the SQL statement. The SqlDbType for the parameter will be automatically determined. 
            Use this to specify parameters when using a custom SQL statement with <see cref="T:Sushi.MicroORM.Connector`1"/>.
            </summary>
            <param name="name"></param>        
            <param name="value"></param>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddParameter(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Adds a parameter and its value to a SQL statement. 
            Use this to specify parameters when using a custom SQL statement with <see cref="T:Sushi.MicroORM.Connector`1"/>.
            </summary>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddParameter(System.String,System.Data.DataTable,System.String)">
            <summary>
            Adds a table valued parameter and its value to a SQL statement as parameter. The <paramref name="typeName"/> needs to be defined as user-defined type in SQL Server.        
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Add a predicate to the WHERE clause using the column mapped to the property or field specified by <paramref name="mappingExpression"/>, 
            using <see cref="F:Sushi.MicroORM.ComparisonOperator.Equals"/> to compare to <paramref name="value"/>.
            </summary>
            <param name="mappingExpression"></param>
            <param name="value"></param>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,Sushi.MicroORM.ComparisonOperator)">
            <summary>
            Add a predicate to the WHERE clause using the column mapped to the property or field specified by <paramref name="mappingExpression"/>. 
            </summary>
            <param name="mappingExpression"></param>
            <param name="value"></param>
            <param name="comparisonOperator"></param>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.Add(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Adds a predicate to the WHERE clause using the specified column,
            using <see cref="F:Sushi.MicroORM.ComparisonOperator.Equals"/> to compare to <paramref name="value"/>.
            </summary>
            <param name="column"></param>
            <param name="type"></param>
            <param name="value"></param>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.Add(System.String,System.Data.SqlDbType,System.Object,Sushi.MicroORM.ComparisonOperator)">
            <summary>
            Adds a predicate to the WHERE clause using the specified column. 
            </summary>
            <param name="column"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="comparisonOperator"></param>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddSql(System.String)">
            <summary>
            Adds a plain text SQL search condition to the WHERE clause. 
            </summary>
            <param name="customSql"></param>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddOrder(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add a column to the ORDER BY clause that will be used to sort the result set.
            </summary>
            <param name="memberExpression"></param>        
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddOrder(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Sushi.MicroORM.SortOrder)">
            <summary>
            Add a column to the ORDER BY clause that will be used to sort the result set.
            </summary>
            <param name="memberExpression"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="M:Sushi.MicroORM.DataFilter`1.AddOrder(System.String,Sushi.MicroORM.SortOrder)">
            <summary>
            Add a column to the ORDER BY clause that will be used to sort the result set.
            </summary>
            <param name="column"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMap">
            <summary>
            Represents the mapping between database objects and code objects.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.Mapping.DataMap"/> for a type defined by <paramref name="mappedType"/>.
            </summary>
            <param name="mappedType"></param>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMap.MappedType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the class for which this <see cref="T:Sushi.MicroORM.Mapping.DataMap"/> defines a mapping.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMap.TableName">
            <summary>
            Gets the name of the table in the database to which class T is mapped
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap.Table(System.String)">
            <summary>
            Sets the name of the table in the database to which class T is mapped
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMap.Items">
            <summary>
            Gets a collection of <see cref="T:Sushi.MicroORM.Mapping.DataMapItem"/> objects that define the mapping between object and database.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap.GetPrimaryKeyColumns">
            <summary>
            Gets all columns that are mapped to a primary key column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap.ValidateMappingForGeneratedQueries">
            <summary>
            Validates if this map can be used to generate queries.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMap`1">
            <summary>
            Represents the mapping between database objects and code objects.
            </summary>
            <typeparam name="T">Class to map with SQL table and columns.</typeparam>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.Mapping.DataMap`1"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap`1.Id(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Maps the property defined by <paramref name="memberExpression"/> to <paramref name="columnName"/> as (part of) a primary key. By default, the property will be mapped as an 
            identity column.
            </summary>
            <param name="memberExpression"></param>
            <param name="columnName"></param>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Maps the property defined by <paramref name="memberExpression"/> to <paramref name="columnName"/> as (part of) a primary key.
            </summary>
            <param name="memberExpression"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMapAttribute">
            <summary>
            Defines the connection between a class and a <see cref="T:Sushi.MicroORM.Mapping.DataMap"/>. Set the attribute on the class you want to map the <see cref="T:Sushi.MicroORM.Mapping.DataMap"/> against.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapAttribute.#ctor(System.Type)">
            <summary>
            Initialiezs a new instance of the <see cref="T:Sushi.MicroORM.Mapping.DataMapAttribute"/> class.
            </summary>
            <param name="dataMapType"></param>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapAttribute.DataMapType">
            <summary>
            Gets the type of the class of the <see cref="T:Sushi.MicroORM.Mapping.DataMap"/>
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMapItem">
            <summary>
            Represents the mapping between a property or field and a database column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.Sender">
            <summary>
            Gets ot set the sending datamap entity.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.Column">
            <summary>
            Gets or set the column mapped to this item.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.Alias">
            <summary>
            Gets or set the alias of the mapped column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.MemberInfoTree">
            <summary>
            Gets or sets <see cref="T:System.Reflection.MemberInfo"/> about the mapped field or property.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.IsReadOnly">
            <summary>
            Gets or sets a value indicating if the mapped column can be modified. If set to true, UPDATE and INSERT statements will not modify the column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating if the mapped column is part of a primary key.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.IsIdentity">
            <summary>
            Gets or sets a value indicating if the mapped column is an identity column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.Length">
            <summary>
            Gets or sets the length of the mapped column. This can be used to explicitly specify the length of a mapped VARCHAR or NVARCHAR column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.SqlType">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlDbType"/> of the mapped column.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItem.ColumnSelectListName">
            <summary>
            Gets the statement to use in a select list. If <see cref="P:Sushi.MicroORM.Mapping.DataMapItem.Alias"/> is defined, this will return '<see cref="P:Sushi.MicroORM.Mapping.DataMapItem.Column"/> as <see cref="P:Sushi.MicroORM.Mapping.DataMapItem.Alias"/>.
            Otherwiste only <see cref="P:Sushi.MicroORM.Mapping.DataMapItem.Column"/> is returned.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMapItemSetter">
            <summary>
            Provides methods to fluently configure a <see cref="T:Sushi.MicroORM.Mapping.DataMapItem"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapItemSetter.DataItem">
            <summary>
            The database column configuration
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.SqlType(System.Data.SqlDbType)">
            <summary>
            Sets the <see cref="T:System.Data.SqlDbType"/> of the mapped column.
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.Length(System.Int32)">
            <summary>
            Sets the length of the mapped column. This can be used to explicitly set the length for VARCHAR and NVARCHAR columns.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.ReadOnly">
            <summary>
            Sets the property to read-only, indicating the underlying column cannot be modified. UPDATE and INSERT statements will not alter the mapped column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.Alias(System.String)">
            <summary>
            Sets the alias for the database column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.Identity">
            <summary>
            Sets a value indicating the underlying column is an identity column, assigned by the database on INSERT. This is the default for columns mapped with <see cref="M:Sushi.MicroORM.Mapping.DataMap`1.Id(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)"/>.
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapItemSetter.Assigned">
            <summary>
            Sets a value indicating the underlying column is assigned by the application. This is the default for columns mapped with <see cref="M:Sushi.MicroORM.Mapping.DataMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)" />.
            </summary>        
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.DataMapProvider">
            <summary>
            Provides methods to map class types to DataMaps
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.DataMapProvider.DataMapTypes">
            <summary>
            Gets a collection of key value pairs with default relations between <see cref="T:Sushi.MicroORM.Mapping.DataMap"/> classes and mapped classes.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapProvider.AddMapping``2">
            <summary>
            Sets the DataMap<typeparamref name="T"/> to use when resolving queries for <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Y"></typeparam>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapProvider.AddMapping(System.Type,System.Type)">
            <summary>
            Sets the type to use when resolving queries for another type.
            </summary>
            <param name="classToMap"></param>
            <param name="dataMap"></param>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapProvider.GetMapForType``1">
            <summary>
            Returns an instance of DataMap<typeparamref name="T"/> for <typeparamref name="T"/> if declared. If not, null is returned
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapProvider.GetMapForType(System.Type)">
            <summary>
            Returns an instance of DataMap for <param name="type"></param> if declared. If not, null is returned
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Mapping.DataMapProvider.RetrieveMapFromAttributeOnType(System.Type)">
            <summary>
            Checks if type<param name="type"/> has a DataMapAttribute defining. Returns null if no attribute found
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Mapping.TableSetter">
            <summary>
            Extendable object
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Mapping.TableSetter.Map">
            <summary>
            Gets ot set the sending datamap entity.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.PagingData">
            <summary>
            Represents all fields necessary to perform paging.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.PagingData.NumberOfRows">
            <summary>
            Maximum number of records to retrieve per database call.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.PagingData.PageIndex">
            <summary>
            Zero based page index, used as offset.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.PagingData.TotalNumberOfRows">
            <summary>
            After a query is performed the total number of rows for the supplied where clause is set here.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.SortOrder">
            <summary>
            Specifies the options available for ordering data.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.SortOrder.ASC">
            <summary>
            Data is sorted ascending.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.SortOrder.DESC">
            <summary>
            Data is sorted descending.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.SqlCommander">
            <summary>
            Represents the SQL Server data command wrapper.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Sushi.MicroORM.SqlCommander"/> class.
            </summary>
            <param name="connection">The connection.</param>                
            <param name="commandTimeout">The wait time before terminating the attempt to execute a command and generating an error.</param>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Sushi.MicroORM.SqlCommander"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.SqlCommander.ConnectionString">
            <summary>
            The database connectionString
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Sushi.MicroORM.SqlCommander.SqlText">
            <summary>
            Get or sets the SQL statement that will be executed.
            </summary>        
        </member>
        <member name="P:Sushi.MicroORM.SqlCommander.Commandtype">
            <summary>
            Gets or sets the commandtype.
            </summary>
            <value>The commandtype.</value>
        </member>
        <member name="P:Sushi.MicroORM.SqlCommander.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.CleanSql(System.String)">
            <summary>
            Removes unnecessary whitespaces and line endings from <paramref name="sqlText"/>.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameterOutput(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            Set Sqlparameter as output value
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameterInput(System.String,System.Object,System.Data.SqlDbType)">
            <summary>
            Set Sqlparameter as input value
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameterInput(System.String,System.Object,System.Data.SqlDbType,System.String)">
            <summary>
            Set Sqlparameter as input value
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameterInput(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
            Set Sqlparameter as input value
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameterInput(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.String)">
            <summary>
            Set Sqlparameter as input value
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Set Sql parameter
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Data.ParameterDirection,System.String)">
            <summary>
            Set Sql parameter
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.SetParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.Byte,System.Data.ParameterDirection,System.String)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="itemvalue">The itemvalue.</param>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
            <param name="scale">The scale.</param>
            <param name="direction">The direction.</param>
            <param name="typeName">The type name for a table-valued parameter.</param>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.GetParameter(System.String)">
            <summary>
            Get the return value (object) of a specific parameter
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.GetParamInt(System.String)">
            <summary>
            Get the return value (int) of a specific parameter
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.ExecReader">
            <summary>
            Executes the <see cref="F:Sushi.MicroORM.SqlCommander.Command"/> and returns a <see cref="T:System.Data.SqlClient.SqlDataReader"/> to read the result set.
            </summary>
            <value>The exec reader.</value>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.ExecNonQuery">
            <summary>
            Execute the SqlCommand non query.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.ExecScalar">
            <summary>
            Execute the SqlCommand scalar.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.Log">
            <summary>
            Calls <see cref="P:Sushi.MicroORM.DatabaseConfiguration.Log"/> for the current command's text.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.SqlCommander.GetErrorText(System.String)">
            <summary>
            Gets the error text.
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.DMLStatementType">
            <summary>
            Specifies options for the DML Clause of a SQL statement.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.Select">
            <summary>
            The statement selects rows from the database.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.Update">
            <summary>
            The statement updates rows in the database.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.Insert">
            <summary>
            The statement inserts rows into the database.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.Delete">
            <summary>
            The statement deletes rows from the database.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.InsertOrUpdate">
            <summary>
            The statement inserts or updates rows in the database.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.DMLStatementType.CustomQuery">
            <summary>
            The statement can contain anything.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.ReflectionHelper">
            <summary>
            Provides methods to work with properties and fields of mapped objects.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Determines the <see cref="T:System.Type"/> accessed by <paramref name="memberInfo"/>.
            <paramref name="memberInfo"/> must be of type <see cref="F:System.Reflection.MemberTypes.Field"/> or <see cref="F:System.Reflection.MemberTypes.Property"/>.
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.GetMemberType(System.Collections.Generic.List{System.Reflection.MemberInfo})">
            <summary>
            Determines the <see cref="T:System.Type"/> accessed by <paramref name="memberInfoTree"/>.
            <paramref name="memberInfoTree"/> items must be of type <see cref="F:System.Reflection.MemberTypes.Field"/> or <see cref="F:System.Reflection.MemberTypes.Property"/>.
            </summary>
            <param name="memberInfoTree"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.GetMemberValue(System.Collections.Generic.List{System.Reflection.MemberInfo},System.Object)">
            <summary>
            Gets the value of the deepest level member defined by <paramref name="memberInfoTree"/> on <paramref name="entity"/>.
            </summary>
            <param name="memberInfoTree"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value of the member defined by <paramref name="memberInfo"/> on <paramref name="entity"/>.
            </summary>
            <param name="memberInfo"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets <paramref name="value"/> on the property defined by <paramref name="memberInfo"/> on <paramref name="entity"/>.
            </summary>
            <param name="memberInfo"></param>
            <param name="value"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.SetMemberValue(System.Collections.Generic.List{System.Reflection.MemberInfo},System.Object,System.Object)">
            <summary>
            Sets <paramref name="value"/> on the property defined by <paramref name="memberInfoTree"/> on <paramref name="entity"/>.
            </summary>
            <param name="memberInfoTree"></param>
            <param name="value"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.ConvertValueToEnum(System.Object,System.Type)">
            <summary>
            Converts <paramref name="value"/> to an enumeration member if <paramref name="type"/> or its underlying <see cref="T:System.Type"/> is an <see cref="T:System.Enum"/>.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ReflectionHelper.GetMemberTree``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a collection of <see cref="T:System.Reflection.MemberInfo"/> objects represented by the expression. The expression needs to be a <see cref="T:System.Linq.Expressions.MemberExpression"/> or a <see cref="T:System.Linq.Expressions.UnaryExpression"/> wrapping a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.ResultMapper">
            <summary>
            Provides methods to map the results from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> to objects, based on <see cref="T:Sushi.MicroORM.Mapping.DataMap"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapper.MapToSingleResult``1(System.Data.SqlClient.SqlDataReader,Sushi.MicroORM.Mapping.DataMap{``0},Sushi.MicroORM.FetchSingleMode)">
            <summary>
            Maps the first row found in <paramref name="reader"/> to an object of type <typeparamref name="T"/> using the provided <paramref name="map"/>.
            </summary>                   
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapper.MapToSingleResultScalar``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Maps the first row found in <paramref name="reader"/> to an object of type <typeparamref name="TResult"/>
            </summary>          
            <param name="reader"></param>        
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapper.MapToMultipleResults``1(System.Data.SqlClient.SqlDataReader,Sushi.MicroORM.Mapping.DataMap{``0})">
            <summary>
            Maps all rows found in the first resultset of <paramref name="reader"/> to a collectiobn of objects of type <typeparamref name="T"/> using the provided <paramref name="map"/>.        
            If <paramref name="reader"/> contains a second resultset, it is expected to contain a scalar value that will be used to set <see cref="P:Sushi.MicroORM.PagingData.NumberOfRows"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="map"></param>        
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapper.MapToMultipleResultsScalar``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Converts the first column of all rows found in <paramref name="reader"/> to an object of type <typeparamref name="TResult"/>
            </summary>          
            <param name="reader"></param>        
        </member>
        <member name="T:Sushi.MicroORM.Supporting.ResultMapperAsync">
            <summary>
            Provides methods to map the results from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> to objects, based on <see cref="T:Sushi.MicroORM.Mapping.DataMap"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapperAsync.MapToSingleResultAsync``1(System.Data.SqlClient.SqlDataReader,Sushi.MicroORM.Mapping.DataMap{``0},Sushi.MicroORM.FetchSingleMode,System.Threading.CancellationToken)">
            <summary>
            Maps the first row found in <paramref name="reader"/> to an object of type <typeparamref name="T"/> using the provided <paramref name="map"/>.
            </summary>                  
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapperAsync.MapToSingleResultScalarAsync``1(System.Data.SqlClient.SqlDataReader,System.Threading.CancellationToken)">
            <summary>
            Maps the first row found in <paramref name="reader"/> to an object of type <typeparamref name="TResult"/>
            </summary>                  
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapperAsync.MapToMultipleResultsAsync``1(System.Data.SqlClient.SqlDataReader,Sushi.MicroORM.Mapping.DataMap{``0},System.Threading.CancellationToken)">
            <summary>
            Maps all rows found in the first resultset of <paramref name="reader"/> to a collectiobn of objects of type <typeparamref name="T"/> using the provided <paramref name="map"/>.        
            If <paramref name="reader"/> contains a second resultset, it is expected to contain a scalar value that will be used to set <see cref="P:Sushi.MicroORM.PagingData.NumberOfRows"/>.
            </summary>
            <typeparam name="T"></typeparam>             
        </member>
        <member name="M:Sushi.MicroORM.Supporting.ResultMapperAsync.MapToMultipleResultsScalarAsync``1(System.Data.SqlClient.SqlDataReader,System.Threading.CancellationToken)">
            <summary>
            Converts the first column of all rows found in <paramref name="reader"/> to an object of type <typeparamref name="TResult"/>
            </summary>                  
        </member>
        <member name="T:Sushi.MicroORM.Supporting.SqlStatement`2">
            <summary>
            Represents a SQL statement to be executed against a database.
            </summary>
            <typeparam name="TMapped">The mapped type that was used to generate the statement.</typeparam>
            <typeparam name="TResult">The expected result type to map the response to.</typeparam>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatement`2.#ctor(Sushi.MicroORM.Supporting.DMLStatementType,Sushi.MicroORM.Supporting.SqlStatementResultCardinality)">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatement`2"/>.
            </summary>
            <param name="dmlStatement"></param>
            <param name="resultCardinality"></param>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.DMLStatement">
            <summary>
            Gets the type of the DML statement.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.ResultCardinality">
            <summary>
            Gets the cardinality of the result expected to be generated by the statement.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.DmlClause">
            <summary>
            Gets or sets the DML clause of the statement, ie. SELECT MyColumn, UPDATE MyTable, etc.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.InsertIntoClause">
            <summary>
            Gets or sets the INTO clause of an INSERT statement, ie. INTO MyTable(MyColumn1, MyColumn2).
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.InsertValuesClause">
            <summary>
            Gets or sets the VALUES clause of an INSERT statement, ie. VALUES (@myValue1, @myValue2).
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.UpdateSetClause">
            <summary>
            Get or sets the SET clause of an UPDATE statement, ie. SET MyColumn1 = @myValue1, MyColumn2 = @myValue2.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.OutputClause">
            <summary>
            Gets or sets the output clause of the statement, ie. OUTPUT Inserted.MyColumn.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.WhereClause">
            <summary>
            Gets or sets the where clause of the statment, ie. WHERE MyColumn = @myParameter.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.FromClause">
            <summary>
            Gets or sets the from clause of the statement, ie. FROM MyTable.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.OrderByClause">
            <summary>
            Gets or sets the order by clause of the statement, ie. ORDER BY MyColumn1 ASC, MyColumn2 DESC.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.CustomSqlStatement">
            <summary>
            Gets or sets a custom sql statement to be executed. Can be anything, ie. EXEC myStoredProcedure @myParam, SELECT * FROM MyTable, etc.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.Parameters">
            <summary>
            Gets a collection of <see cref="T:Sushi.MicroORM.Supporting.SqlStatementParameter"/> objects describing the parameters used in the statement.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatement`2.AddPagingRowCountStatement">
            <summary>
            Gets or sets a value indicating if a second statement must be added which will retrieve the total number of rows for the resultset defined by <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.FromClause"/> and <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.WhereClause"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatement`2.GenerateSqlStatement">
            <summary>
            Generates a sql statement based on the clauses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatement`2.GeneratePagingRowCountSqlStatement">
            <summary>
            Generates a sql statement which counts the total number of rows for the resultset defined by <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.FromClause"/> and <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.WhereClause"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.SqlStatementGenerator">
            <summary>
            Provides methods to generate instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatement`2"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementGenerator.GenerateSqlStatment``2(Sushi.MicroORM.Supporting.DMLStatementType,Sushi.MicroORM.Supporting.SqlStatementResultCardinality,Sushi.MicroORM.Mapping.DataMap{``0},Sushi.MicroORM.DataFilter{``0},System.String)">
            <summary>
            Generates an instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatement`2"/>.
            </summary>
            <typeparam name="TMapped"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="statementType"></param>
            <param name="resultType"></param>
            <param name="map"></param>
            <param name="filter"></param>
            <param name="customQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementGenerator.GenerateSqlStatment``2(Sushi.MicroORM.Supporting.DMLStatementType,Sushi.MicroORM.Supporting.SqlStatementResultCardinality,Sushi.MicroORM.Mapping.DataMap{``0},Sushi.MicroORM.DataFilter{``0},System.String,``0,System.Boolean)">
            <summary>
            Generates an instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatement`2"/>. Use this overload to provide an entity to insert or update.
            </summary>
            <typeparam name="TMapped"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="statementType"></param>
            <param name="resultType"></param>
            <param name="map"></param>
            <param name="filter"></param>
            <param name="customQuery"></param>
            <param name="entity"></param>
            <param name="isIdentityInsert"></param>
            <returns></returns>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementGenerator.AddWhereClauseToStatement``2(Sushi.MicroORM.Supporting.SqlStatement{``0,``1},Sushi.MicroORM.DataFilter{``0})">
            <summary>
            Sets <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.WhereClause"/> and <see cref="P:Sushi.MicroORM.Supporting.SqlStatement`2.Parameters"/> based on values supplied in <paramref name="filter"/>.
            </summary>        
            <param name="query"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.SqlStatementParameter">
            <summary>
            Represents a parameter used in a SQL statement.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementParameter.#ctor(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatementParameter"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="length"></param>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementParameter.#ctor(System.String,System.Object,System.Data.SqlDbType,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatementParameter"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementParameter.Name">
            <summary>
            Gets or sets the name of the parameter, ie. @myParameter.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementParameter.Type">
            <summary>
            Gets or sets the <see cref="T:System.Data.SqlDbType"/> of the parameter. The <see cref="P:Sushi.MicroORM.Supporting.SqlStatementParameter.Value"/> must be compatible with this type.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementParameter.Length">
            <summary>
            Gets or sets the length of the parameter. This is optional in most cases.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementParameter.TypeName">
            <summary>
            Gets or sets a custom type name. Can be used for user defined types.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.SqlStatementResult`1">
            <summary>
            Represents the response generated by executing a <see cref="!:SqlStatement&lt;TResult&gt;"/>.
            </summary>    
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementResult`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatementResult`1"/> with <see cref="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.ResultCardinality"/> <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.None"/>. 
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementResult`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a new instance of <see cref="T:Sushi.MicroORM.Supporting.SqlStatementResult`1"/> with type <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.MultipleRows"/>.
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementResult`1.#ctor(System.Collections.Generic.List{`0},System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="!:SqlStatementResult&lt;TMapped, TResult&gt;"/> with type <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.MultipleRows"/>.
            </summary>        
        </member>
        <member name="M:Sushi.MicroORM.Supporting.SqlStatementResult`1.#ctor(`0)">
            <summary>
            Creates a new instance of <see cref="!:SqlStatementResult&lt;TMapped, TResult&gt;"/> with type set to <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.SingleRow"/>.
            </summary>                
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.ResultCardinality">
            <summary>
            Gets a value indicating the cardinality of the result returned by the sql statement. If <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.MultipleRows"/> the result is set on <see cref="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.MultipleResults"/>. 
            If <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.SingleRow"/> the result is set on <see cref="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.SingleResult"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.SingleResult">
            <summary>
            Gets the mapped result for the sql statement if <see cref="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.ResultCardinality"/> is set to <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.SingleRow"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.MultipleResults">
            <summary>
            Gets a collection of mapped results for the sql statement if <see cref="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.ResultCardinality"/> is set to <see cref="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.MultipleRows" />.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.Supporting.SqlStatementResult`1.TotalNumberOfRows">
            <summary>
            Gets a value indicating the total number of rows for a query if paging was applied to that query.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Supporting.SqlStatementResultCardinality">
            <summary>
            Specifies options for the cardinality of the result set expected to be created by a SQL statement.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.SingleRow">
            <summary>
            The statement returns one row.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.MultipleRows">
            <summary>
            The statement returns multiple rows.
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.Supporting.SqlStatementResultCardinality.None">
            <summary>
            The statement has no return value.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.Utility">
            <summary>
            Provides utility methods.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.Utility.GetSqlDbType(System.Type)">
            <summary>
            Determines the best matching <see cref="T:System.Data.SqlDbType"/> for <paramref name="type"/>.
            </summary>        
            <returns></returns>
        </member>
        <member name="T:Sushi.MicroORM.WhereCondition">
            <summary>
            Represents a condition in a where clause
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.SqlText">
            <summary>
            Gets or sets a custom SQL statement to use as condition.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.Column">
            <summary>
            Gets or sets the name of the column to which this predicate applies.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.Value">
            <summary>
            Gets or sets the value to which <see cref="P:Sushi.MicroORM.WhereCondition.Column"/> is tested.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.SqlType">
            <summary>
            Get or sets the <see cref="T:System.Data.SqlDbType"/> of <see cref="P:Sushi.MicroORM.WhereCondition.Column"/>. This will also be the <see cref="T:System.Data.SqlDbType"/> of the parameter generated to define <see cref="P:Sushi.MicroORM.WhereCondition.Value"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.Length">
            <summary>
            Get or sets the length of the paramater generated to define <see cref="P:Sushi.MicroORM.WhereCondition.Value"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.CompareType">
            <summary>
            Gets or sets the <see cref="T:Sushi.MicroORM.ComparisonOperator"/> used to compare <see cref="P:Sushi.MicroORM.WhereCondition.Column"/> and <see cref="P:Sushi.MicroORM.WhereCondition.Value"/>.
            </summary>
        </member>
        <member name="P:Sushi.MicroORM.WhereCondition.ConnectType">
            <summary>
            Gets or sets the logical operator used to combine this predicate with other predicates in the where clause.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.WhereCondition.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.WhereCondition"/> using the specified SQL statement as predicate.
            </summary>
            <param name="sqlText">The SQL text.</param>
        </member>
        <member name="M:Sushi.MicroORM.WhereCondition.#ctor(System.String,System.Data.SqlDbType,System.Object,Sushi.MicroORM.ComparisonOperator)">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.WhereCondition"/> where the predicate is built using the specified <paramref name="column"/> and <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.WhereCondition.#ctor(System.String,System.Data.SqlDbType,System.Object,System.Int32,Sushi.MicroORM.ComparisonOperator)">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.WhereCondition"/> where the predicate is built using the specified <paramref name="column"/> and <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Sushi.MicroORM.WhereCondition.#ctor(System.String,System.Data.SqlDbType,System.Object,System.Int32,Sushi.MicroORM.ComparisonOperator,Sushi.MicroORM.WhereConditionOperator)">
            <summary>
            Initializes a new instance of <see cref="T:Sushi.MicroORM.WhereCondition"/> where the predicate is built using the specified <paramref name="column"/> and <paramref name="value"/>.
            </summary>
        </member>
        <member name="T:Sushi.MicroORM.WhereConditionOperator">
            <summary>
            Defines operators that can be used to combine conditions in a where clause
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.WhereConditionOperator.And">
            <summary>
            Logical AND operator
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.WhereConditionOperator.Or">
            <summary>
            Using Or will combine the previous and the current conditions in an OR group (A = 1 or B = 2)
            </summary>
        </member>
        <member name="F:Sushi.MicroORM.WhereConditionOperator.OrUngrouped">
            <summary>
             Using OrUngrouped will just add the or statement without setting an or group
            </summary>
        </member>
    </members>
</doc>
