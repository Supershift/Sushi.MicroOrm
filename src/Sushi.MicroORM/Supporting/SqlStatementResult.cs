using System;
using System.Collections.Generic;
using System.Text;

namespace Sushi.MicroORM.Supporting
{
    /// <summary>
    /// Represents the mapped response generated by executing a <see cref="SqlStatement"/>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class SqlStatementResult<T> 
    {   
        /// <summary>
        /// Creates a new instance of <see cref="SqlStatementResult{T}"/> with <see cref="ResultType"/> <see cref="SqlStatementResultType.None"/>. 
        /// </summary>
        public SqlStatementResult()
        {
            ResultType = SqlStatementResultType.None;
        }
        
        /// <summary>
        /// Creates a new instance of <see cref="SqlStatementResult{T}"/> with type <see cref="SqlStatementResultType.Multiple"/>.
        /// </summary>
        /// <param name="results"></param>
        public SqlStatementResult(List<T> results)
        {
            ResultType = SqlStatementResultType.Multiple;

            MultipleResults = results;
        }

        /// <summary>
        /// Creates a new instance of <see cref="SqlStatementResult{T}"/> with type <see cref="SqlStatementResultType.Multiple"/>.
        /// </summary>        
        public SqlStatementResult(List<T> results, int? totalNumberOfRows) : this(results)
        {
            TotalNumberOfRows = totalNumberOfRows;
        }

        /// <summary>
        /// Creates a new instance of <see cref="SqlStatementResult{T}"/> with type set to <see cref="SqlStatementResultType.Single"/>.
        /// </summary>                
        public SqlStatementResult(T result)
        {
            ResultType = SqlStatementResultType.Single;
            SingleResult = result;
        }

        /// <summary>
        /// Creates a new instance of <see cref="SqlStatementResult{T}"/> with type set to <see cref="SqlStatementResultType.Single"/>.
        /// </summary>                
        public SqlStatementResult(object scalarResult)
        {
            ResultType = SqlStatementResultType.Scalar;
            ScalarResult = scalarResult;
        }

        /// <summary>
        /// Gets a value indicating what sort of result is returned by the sql statement. If <see cref="SqlStatementResultType.Multiple"/> the result is set on <see cref="MultipleResults"/>. 
        /// If <see cref="SqlStatementResultType.Scalar"/> or <see cref="SqlStatementResultType.Single"/> the result is set on <see cref="SingleResult"/>.
        /// </summary>
        public SqlStatementResultType ResultType { get; private set; }
        /// <summary>
        /// Gets the mapped result for the sql statement if <see cref="ResultType"/> is set to <see cref="SqlStatementResultType.Scalar"/> or <see cref="SqlStatementResultType.Single"/>.
        /// </summary>
        public T SingleResult { get; private set; }


        public object ScalarResult { get; private set; }

        /// <summary>
        /// Gets a collection of mapped results for the sql statement if <see cref="ResultType"/> is set to <see cref="SqlStatementResultType.Multiple" />.
        /// </summary>
        public List<T> MultipleResults { get; private set; }

        /// <summary>
        /// Gets a value indicating the total number of rows for a query if paging was applied to that query.
        /// </summary>
        public int? TotalNumberOfRows { get; private set; }
    }
}
